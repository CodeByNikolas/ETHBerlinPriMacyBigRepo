{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/maci-contracts/MACIWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { MACI } from \"maci-contracts/contracts/MACI.sol\";\nimport { IPollFactory } from \"maci-contracts/contracts/interfaces/IPollFactory.sol\";\nimport { IMessageProcessorFactory } from \"maci-contracts/contracts/interfaces/IMPFactory.sol\";\nimport { ITallyFactory } from \"maci-contracts/contracts/interfaces/ITallyFactory.sol\";\nimport { SignUpGatekeeper } from \"maci-contracts/contracts/gatekeepers/SignUpGatekeeper.sol\";\nimport { InitialVoiceCreditProxy } from \"maci-contracts/contracts/initialVoiceCreditProxy/InitialVoiceCreditProxy.sol\";\nimport { TopupCredit } from \"maci-contracts/contracts/TopupCredit.sol\";\n\n/// @title MACI - Minimum Anti-Collusion Infrastructure Version 1\n/// @notice A contract which allows users to sign up, and deploy new polls\ncontract MACIWrapper is MACI {\n\tstruct PollData {\n\t\tuint256 id;\n\t\tstring name;\n\t\tbytes encodedOptions;\n\t\tstring metadata;\n\t\tMACIWrapper.PollContracts pollContracts;\n\t\tuint256 startTime;\n\t\tuint256 endTime;\n\t\tuint256 numOfOptions;\n\t\tstring[] options;\n\t\tstring tallyJsonCID;\n\t}\n\n\tmapping(uint256 => PollData) internal _polls;\n\n\tTreeDepths public treeDepths;\n\tPubKey public coordinatorPubKey;\n\taddress public verifier;\n\taddress public vkRegistry;\n\n\tmapping(address => uint256) public pollIds;\n\n\tevent PollCreated(\n\t\tuint256 indexed pollId,\n\t\taddress indexed creator,\n\t\tMACIWrapper.PollContracts pollContracts,\n\t\tstring name,\n\t\tstring[] options,\n\t\tstring metadata,\n\t\tuint256 startTime,\n\t\tuint256 endTime\n\t);\n\n\tevent PollTallyCIDUpdated(uint256 indexed pollId, string tallyJsonCID);\n\n\t// pubkey.x => pubkey.y => bool\n\tmapping(uint256 => mapping(uint256 => bool)) public isPublicKeyRegistered;\n\n\terror PubKeyAlreadyRegistered();\n\terror PollAddressDoesNotExist(address _poll);\n\n\tconstructor(\n\t\tIPollFactory _pollFactory,\n\t\tIMessageProcessorFactory _messageProcessorFactory,\n\t\tITallyFactory _tallyFactory,\n\t\tSignUpGatekeeper _signUpGatekeeper,\n\t\tInitialVoiceCreditProxy _initialVoiceCreditProxy,\n\t\tTopupCredit _topupCredit,\n\t\tuint8 _stateTreeDepth\n\t)\n\t\tMACI(\n\t\t\t_pollFactory,\n\t\t\t_messageProcessorFactory,\n\t\t\t_tallyFactory,\n\t\t\t_signUpGatekeeper,\n\t\t\t_initialVoiceCreditProxy,\n\t\t\t_topupCredit,\n\t\t\t_stateTreeDepth\n\t\t)\n\t{}\n\n\tfunction setConfig(\n\t\tTreeDepths memory _treeDepths,\n\t\tPubKey memory _coordinatorPubKey,\n\t\taddress _verifier,\n\t\taddress _vkRegistry\n\t) public onlyOwner {\n\t\ttreeDepths = _treeDepths;\n\t\tcoordinatorPubKey = _coordinatorPubKey;\n\t\tverifier = _verifier;\n\t\tvkRegistry = _vkRegistry;\n\t}\n\n\t/// @notice Allows any eligible user sign up. The sign-up gatekeeper should prevent\n\t/// double sign-ups or ineligible users from doing so.  This function will\n\t/// only succeed if the sign-up deadline has not passed. It also enqueues a\n\t/// fresh state leaf into the state AccQueue.\n\t/// @param _pubKey The user's desired public key.\n\t/// @param _signUpGatekeeperData Data to pass to the sign-up gatekeeper's\n\t///     register() function. For instance, the POAPGatekeeper or\n\t///     SignUpTokenGatekeeper requires this value to be the ABI-encoded\n\t///     token ID.\n\t/// @param _initialVoiceCreditProxyData Data to pass to the\n\t///     InitialVoiceCreditProxy, which allows it to determine how many voice\n\t///     credits this user should have.\n\tfunction signUp(\n\t\tPubKey memory _pubKey,\n\t\tbytes memory _signUpGatekeeperData,\n\t\tbytes memory _initialVoiceCreditProxyData\n\t) public override {\n\t\t// check if the pubkey is already registered\n\t\tif (isPublicKeyRegistered[_pubKey.x][_pubKey.y])\n\t\t\trevert PubKeyAlreadyRegistered();\n\n\t\tsuper.signUp(\n\t\t\t_pubKey,\n\t\t\t_signUpGatekeeperData,\n\t\t\t_initialVoiceCreditProxyData\n\t\t);\n\n\t\tisPublicKeyRegistered[_pubKey.x][_pubKey.y] = true;\n\t}\n\n\tfunction createPoll(\n\t\tstring calldata _name,\n\t\tstring[] calldata _options,\n\t\tstring calldata _metadata,\n\t\tuint256 _duration,\n\t\tMode isQv\n\t) public onlyOwner {\n\t\t// TODO: check if the number of options are more than limit\n\n\t\tuint256 pollId = nextPollId;\n\n\t\tPollContracts memory pollContracts = deployPoll(\n\t\t\t_duration,\n\t\t\ttreeDepths,\n\t\t\tcoordinatorPubKey,\n\t\t\tverifier,\n\t\t\tvkRegistry,\n\t\t\tisQv\n\t\t);\n\n\t\tpollIds[pollContracts.poll] = pollId;\n\n\t\t// encode options to bytes for retrieval\n\t\tbytes memory encodedOptions = abi.encode(_options);\n\n\t\tuint256 endTime = block.timestamp + _duration;\n\n\t\t// create poll\n\t\t_polls[pollId] = PollData({\n\t\t\tid: pollId,\n\t\t\tname: _name,\n\t\t\tencodedOptions: encodedOptions,\n\t\t\tnumOfOptions: _options.length,\n\t\t\tmetadata: _metadata,\n\t\t\tstartTime: block.timestamp,\n\t\t\tendTime: endTime,\n\t\t\tpollContracts: pollContracts,\n\t\t\toptions: _options,\n\t\t\ttallyJsonCID: \"\"\n\t\t});\n\n\t\temit PollCreated(\n\t\t\tpollId,\n\t\t\tmsg.sender,\n\t\t\tpollContracts,\n\t\t\t_name,\n\t\t\t_options,\n\t\t\t_metadata,\n\t\t\tblock.timestamp,\n\t\t\tendTime\n\t\t);\n\t}\n\n\tfunction getPollId(address _poll) public view returns (uint256 pollId) {\n\t\tif (pollIds[_poll] >= nextPollId) revert PollAddressDoesNotExist(_poll);\n\t\tpollId = pollIds[_poll];\n\t}\n\n\tfunction updatePollTallyCID(\n\t\tuint256 _pollId,\n\t\tstring calldata _tallyJsonCID\n\t) public onlyOwner {\n\t\tif (_pollId >= nextPollId) revert PollDoesNotExist(_pollId);\n\t\tPollData storage poll = _polls[_pollId];\n\t\tpoll.tallyJsonCID = _tallyJsonCID;\n\n\t\temit PollTallyCIDUpdated(_pollId, _tallyJsonCID);\n\t}\n\n\tfunction fetchPolls(\n\t\tuint256 _page,\n\t\tuint256 _perPage,\n\t\tbool _ascending\n\t) public view returns (PollData[] memory polls_) {\n\t\tuint256 start = (_page - 1) * _perPage;\n\t\tuint256 end = start + _perPage - 1;\n\n\t\tif (start >= nextPollId) {\n\t\t\treturn new PollData[](0);\n\t\t}\n\n\t\tif (end >= nextPollId) {\n\t\t\tend = nextPollId - 1;\n\t\t}\n\n\t\tpolls_ = new PollData[](end - start + 1);\n\n\t\tuint256 index = 0;\n\t\tfor (uint256 i = start; i <= end; i++) {\n\t\t\tuint256 pollIndex = i;\n\t\t\tif (!_ascending) {\n\t\t\t\tpollIndex = nextPollId - i - 1;\n\t\t\t}\n\t\t\tpolls_[index++] = _polls[pollIndex];\n\t\t}\n\t}\n\n\tfunction fetchPoll(\n\t\tuint256 _pollId\n\t) public view returns (PollData memory poll_) {\n\t\tif (_pollId >= nextPollId) revert PollDoesNotExist(_pollId);\n\t\treturn _polls[_pollId];\n\t}\n}\n"
    },
    "maci-contracts/contracts/crypto/BabyJubJub.sol": {
      "content": "// @note This code was taken from\n// https://github.com/yondonfu/sol-baby-jubjub/blob/master/contracts/CurveBabyJubJub.sol\n// Thanks to yondonfu for the code\n// Implementation cited on baby-jubjub's paper\n// https://eips.ethereum.org/EIPS/eip-2494#implementation\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nlibrary CurveBabyJubJub {\n  // Curve parameters\n  // E: 168700x^2 + y^2 = 1 + 168696x^2y^2\n  // A = 168700\n  uint256 public constant A = 0x292FC;\n  // D = 168696\n  uint256 public constant D = 0x292F8;\n  // Prime Q = 21888242871839275222246405745257275088548364400416034343698204186575808495617\n  uint256 public constant Q = 0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001;\n\n  /**\n   * @dev Add 2 points on baby jubjub curve\n   * Formula for adding 2 points on a twisted Edwards curve:\n   * x3 = (x1y2 + y1x2) / (1 + dx1x2y1y2)\n   * y3 = (y1y2 - ax1x2) / (1 - dx1x2y1y2)\n   */\n  function pointAdd(uint256 _x1, uint256 _y1, uint256 _x2, uint256 _y2) internal view returns (uint256 x3, uint256 y3) {\n    if (_x1 == 0 && _y1 == 0) {\n      return (_x2, _y2);\n    }\n\n    if (_x2 == 0 && _y1 == 0) {\n      return (_x1, _y1);\n    }\n\n    uint256 x1x2 = mulmod(_x1, _x2, Q);\n    uint256 y1y2 = mulmod(_y1, _y2, Q);\n    uint256 dx1x2y1y2 = mulmod(D, mulmod(x1x2, y1y2, Q), Q);\n    uint256 x3Num = addmod(mulmod(_x1, _y2, Q), mulmod(_y1, _x2, Q), Q);\n    uint256 y3Num = submod(y1y2, mulmod(A, x1x2, Q), Q);\n\n    x3 = mulmod(x3Num, inverse(addmod(1, dx1x2y1y2, Q)), Q);\n    y3 = mulmod(y3Num, inverse(submod(1, dx1x2y1y2, Q)), Q);\n  }\n\n  /**\n   * @dev Double a point on baby jubjub curve\n   * Doubling can be performed with the same formula as addition\n   */\n  function pointDouble(uint256 _x1, uint256 _y1) internal view returns (uint256 x2, uint256 y2) {\n    return pointAdd(_x1, _y1, _x1, _y1);\n  }\n\n  /**\n   * @dev Multiply a point on baby jubjub curve by a scalar\n   * Use the double and add algorithm\n   */\n  function pointMul(uint256 _x1, uint256 _y1, uint256 _d) internal view returns (uint256 x2, uint256 y2) {\n    uint256 remaining = _d;\n\n    uint256 px = _x1;\n    uint256 py = _y1;\n    uint256 ax = 0;\n    uint256 ay = 0;\n\n    while (remaining != 0) {\n      if ((remaining & 1) != 0) {\n        // Binary digit is 1 so add\n        (ax, ay) = pointAdd(ax, ay, px, py);\n      }\n\n      (px, py) = pointDouble(px, py);\n\n      remaining = remaining / 2;\n    }\n\n    x2 = ax;\n    y2 = ay;\n  }\n\n  /**\n   * @dev Check if a given point is on the curve\n   * (168700x^2 + y^2) - (1 + 168696x^2y^2) == 0\n   */\n  function isOnCurve(uint256 _x, uint256 _y) internal pure returns (bool) {\n    uint256 xSq = mulmod(_x, _x, Q);\n    uint256 ySq = mulmod(_y, _y, Q);\n    uint256 lhs = addmod(mulmod(A, xSq, Q), ySq, Q);\n    uint256 rhs = addmod(1, mulmod(mulmod(D, xSq, Q), ySq, Q), Q);\n    return submod(lhs, rhs, Q) == 0;\n  }\n\n  /**\n   * @dev Perform modular subtraction\n   */\n  function submod(uint256 _a, uint256 _b, uint256 _mod) internal pure returns (uint256) {\n    uint256 aNN = _a;\n\n    if (_a <= _b) {\n      aNN += _mod;\n    }\n\n    return addmod(aNN - _b, 0, _mod);\n  }\n\n  /**\n   * @dev Compute modular inverse of a number\n   */\n  function inverse(uint256 _a) internal view returns (uint256) {\n    // We can use Euler's theorem instead of the extended Euclidean algorithm\n    // Since m = Q and Q is prime we have: a^-1 = a^(m - 2) (mod m)\n    return expmod(_a, Q - 2, Q);\n  }\n\n  /**\n   * @dev Helper function to call the bigModExp precompile\n   */\n  function expmod(uint256 _b, uint256 _e, uint256 _m) internal view returns (uint256 o) {\n    assembly {\n      let memPtr := mload(0x40)\n      mstore(memPtr, 0x20) // Length of base _b\n      mstore(add(memPtr, 0x20), 0x20) // Length of exponent _e\n      mstore(add(memPtr, 0x40), 0x20) // Length of modulus _m\n      mstore(add(memPtr, 0x60), _b) // Base _b\n      mstore(add(memPtr, 0x80), _e) // Exponent _e\n      mstore(add(memPtr, 0xa0), _m) // Modulus _m\n\n      // The bigModExp precompile is at 0x05\n      let success := staticcall(gas(), 0x05, memPtr, 0xc0, memPtr, 0x20)\n      switch success\n      case 0 {\n        revert(0x0, 0x0)\n      }\n      default {\n        o := mload(memPtr)\n      }\n    }\n  }\n}\n"
    },
    "maci-contracts/contracts/crypto/Hasher.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { SnarkConstants } from \"./SnarkConstants.sol\";\nimport { PoseidonT3 } from \"./PoseidonT3.sol\";\nimport { PoseidonT4 } from \"./PoseidonT4.sol\";\nimport { PoseidonT5 } from \"./PoseidonT5.sol\";\nimport { PoseidonT6 } from \"./PoseidonT6.sol\";\n\n/// @notice A SHA256 hash function for any number of input elements, and Poseidon hash\n/// functions for 2, 3, 4, 5, and 12 input elements.\ncontract Hasher is SnarkConstants {\n  /// @notice Computes the SHA256 hash of an array of uint256 elements.\n  /// @param array The array of uint256 elements.\n  /// @return result The SHA256 hash of the array.\n  function sha256Hash(uint256[] memory array) public pure returns (uint256 result) {\n    result = uint256(sha256(abi.encodePacked(array))) % SNARK_SCALAR_FIELD;\n  }\n\n  /// @notice Computes the Poseidon hash of two uint256 elements.\n  /// @param array An array of two uint256 elements.\n  /// @return result The Poseidon hash of the two elements.\n  function hash2(uint256[2] memory array) public pure returns (uint256 result) {\n    result = PoseidonT3.poseidon(array);\n  }\n\n  /// @notice Computes the Poseidon hash of three uint256 elements.\n  /// @param array An array of three uint256 elements.\n  /// @return result The Poseidon hash of the three elements.\n  function hash3(uint256[3] memory array) public pure returns (uint256 result) {\n    result = PoseidonT4.poseidon(array);\n  }\n\n  /// @notice Computes the Poseidon hash of four uint256 elements.\n  /// @param array An array of four uint256 elements.\n  /// @return result The Poseidon hash of the four elements.\n  function hash4(uint256[4] memory array) public pure returns (uint256 result) {\n    result = PoseidonT5.poseidon(array);\n  }\n\n  /// @notice Computes the Poseidon hash of five uint256 elements.\n  /// @param array An array of five uint256 elements.\n  /// @return result The Poseidon hash of the five elements.\n  function hash5(uint256[5] memory array) public pure returns (uint256 result) {\n    result = PoseidonT6.poseidon(array);\n  }\n\n  /// @notice Computes the Poseidon hash of two uint256 elements.\n  /// @param left the first element to hash.\n  /// @param right the second element to hash.\n  /// @return result The Poseidon hash of the two elements.\n  function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 result) {\n    uint256[2] memory input;\n    input[0] = left;\n    input[1] = right;\n    result = hash2(input);\n  }\n}\n"
    },
    "maci-contracts/contracts/crypto/PoseidonT3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @notice A library which provides functions for computing Pedersen hashes.\nlibrary PoseidonT3 {\n  // solhint-disable-next-line no-empty-blocks\n  function poseidon(uint256[2] memory input) public pure returns (uint256) {}\n}\n"
    },
    "maci-contracts/contracts/crypto/PoseidonT4.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @notice A library which provides functions for computing Pedersen hashes.\nlibrary PoseidonT4 {\n  // solhint-disable-next-line no-empty-blocks\n  function poseidon(uint256[3] memory input) public pure returns (uint256) {}\n}\n"
    },
    "maci-contracts/contracts/crypto/PoseidonT5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @notice A library which provides functions for computing Pedersen hashes.\nlibrary PoseidonT5 {\n  // solhint-disable-next-line no-empty-blocks\n  function poseidon(uint256[4] memory input) public pure returns (uint256) {}\n}\n"
    },
    "maci-contracts/contracts/crypto/PoseidonT6.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @notice A library which provides functions for computing Pedersen hashes.\nlibrary PoseidonT6 {\n  // solhint-disable-next-line no-empty-blocks\n  function poseidon(uint256[5] memory input) public pure returns (uint256) {}\n}\n"
    },
    "maci-contracts/contracts/crypto/SnarkConstants.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title SnarkConstants\n/// @notice This contract contains constants related to the SNARK\n/// components of MACI.\ncontract SnarkConstants {\n  /// @notice The scalar field\n  uint256 internal constant SNARK_SCALAR_FIELD =\n    21888242871839275222246405745257275088548364400416034343698204186575808495617;\n\n  /// @notice The public key here is the first Pedersen base\n  /// point from iden3's circomlib implementation of the Pedersen hash.\n  /// Since it is generated using a hash-to-curve function, we are\n  /// confident that no-one knows the private key associated with this\n  /// public key. See:\n  /// https://github.com/iden3/circomlib/blob/d5ed1c3ce4ca137a6b3ca48bec4ac12c1b38957a/src/pedersen_printbases.js\n  /// Its hash should equal\n  /// 6769006970205099520508948723718471724660867171122235270773600567925038008762.\n  uint256 internal constant PAD_PUBKEY_X =\n    10457101036533406547632367118273992217979173478358440826365724437999023779287;\n  uint256 internal constant PAD_PUBKEY_Y =\n    19824078218392094440610104313265183977899662750282163392862422243483260492317;\n\n  /// @notice The Keccack256 hash of 'Maci'\n  uint256 internal constant NOTHING_UP_MY_SLEEVE =\n    8370432830353022751713833565135785980866757267633941821328460903436894336785;\n}\n"
    },
    "maci-contracts/contracts/gatekeepers/SignUpGatekeeper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title SignUpGatekeeper\n/// @notice A gatekeeper contract which allows users to sign up for a poll.\nabstract contract SignUpGatekeeper {\n  /// @notice Allows to set the MACI contract\n  // solhint-disable-next-line no-empty-blocks\n  function setMaciInstance(address _maci) public virtual {}\n\n  /// @notice Registers the user\n  /// @param _user The address of the user\n  /// @param _data additional data\n  // solhint-disable-next-line no-empty-blocks\n  function register(address _user, bytes memory _data) public virtual {}\n}\n"
    },
    "maci-contracts/contracts/initialVoiceCreditProxy/InitialVoiceCreditProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title InitialVoiceCreditProxy\n/// @notice This contract is the base contract for\n/// InitialVoiceCreditProxy contracts. It allows to set a custom initial voice\n/// credit balance for MACI's voters.\nabstract contract InitialVoiceCreditProxy {\n  /// @notice Returns the initial voice credit balance for a new MACI's voter\n  /// @param _user the address of the voter\n  /// @param _data additional data\n  /// @return the balance\n  // solhint-disable-next-line no-empty-blocks\n  function getVoiceCredits(address _user, bytes memory _data) public view virtual returns (uint256) {}\n}\n"
    },
    "maci-contracts/contracts/interfaces/IMACI.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { AccQueue } from \"../trees/AccQueue.sol\";\n\n/// @title IMACI\n/// @notice MACI interface\ninterface IMACI {\n  /// @notice Get the depth of the state tree\n  /// @return The depth of the state tree\n  function stateTreeDepth() external view returns (uint8);\n\n  /// @notice Return the main root of the StateAq contract\n  /// @return The Merkle root\n  function getStateTreeRoot() external view returns (uint256);\n\n  /// @notice Get the number of signups\n  /// @return numsignUps The number of signups\n  function numSignUps() external view returns (uint256);\n}\n"
    },
    "maci-contracts/contracts/interfaces/IMPFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { DomainObjs } from \"../utilities/DomainObjs.sol\";\n\n/// @title IMessageProcessorFactory\n/// @notice MessageProcessorFactory interface\ninterface IMessageProcessorFactory {\n  /// @notice Deploy a new MessageProcessor contract and return the address.\n  /// @param _verifier Verifier contract\n  /// @param _vkRegistry VkRegistry contract\n  /// @param _poll Poll contract\n  /// @param _owner Owner of the MessageProcessor contract\n  /// @param _mode Voting mode\n  /// @return The deployed MessageProcessor contract\n  function deploy(\n    address _verifier,\n    address _vkRegistry,\n    address _poll,\n    address _owner,\n    DomainObjs.Mode _mode\n  ) external returns (address);\n}\n"
    },
    "maci-contracts/contracts/interfaces/IPollFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { TopupCredit } from \"../TopupCredit.sol\";\nimport { Params } from \"../utilities/Params.sol\";\nimport { DomainObjs } from \"../utilities/DomainObjs.sol\";\n\n/// @title IPollFactory\n/// @notice PollFactory interface\ninterface IPollFactory {\n  /// @notice Deploy a new Poll contract and AccQueue contract for messages.\n  /// @param _duration The duration of the poll\n  /// @param _maxValues The max values for the poll\n  /// @param _treeDepths The depths of the merkle trees\n  /// @param _coordinatorPubKey The coordinator's public key\n  /// @param _maci The MACI contract interface reference\n  /// @param _topupCredit The TopupCredit contract\n  /// @param _pollOwner The owner of the poll\n  /// @return The deployed Poll contract\n  function deploy(\n    uint256 _duration,\n    Params.MaxValues memory _maxValues,\n    Params.TreeDepths memory _treeDepths,\n    DomainObjs.PubKey memory _coordinatorPubKey,\n    address _maci,\n    TopupCredit _topupCredit,\n    address _pollOwner\n  ) external returns (address);\n}\n"
    },
    "maci-contracts/contracts/interfaces/ITallyFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { DomainObjs } from \"../utilities/DomainObjs.sol\";\n\n/// @title ITallyFactory\n/// @notice TallyFactory interface\ninterface ITallyFactory {\n  /// @notice Deploy a new Tally contract and return the address.\n  /// @param _verifier Verifier contract\n  /// @param _vkRegistry VkRegistry contract\n  /// @param _poll Poll contract\n  /// @param _messageProcessor MessageProcessor contract\n  /// @param _owner Owner of the contract\n  /// @param _mode Voting mode\n  /// @return The deployed contract\n  function deploy(\n    address _verifier,\n    address _vkRegistry,\n    address _poll,\n    address _messageProcessor,\n    address _owner,\n    DomainObjs.Mode _mode\n  ) external returns (address);\n}\n"
    },
    "maci-contracts/contracts/MACI.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IPollFactory } from \"./interfaces/IPollFactory.sol\";\nimport { IMessageProcessorFactory } from \"./interfaces/IMPFactory.sol\";\nimport { ITallyFactory } from \"./interfaces/ITallyFactory.sol\";\nimport { InitialVoiceCreditProxy } from \"./initialVoiceCreditProxy/InitialVoiceCreditProxy.sol\";\nimport { SignUpGatekeeper } from \"./gatekeepers/SignUpGatekeeper.sol\";\nimport { IMACI } from \"./interfaces/IMACI.sol\";\nimport { Params } from \"./utilities/Params.sol\";\nimport { TopupCredit } from \"./TopupCredit.sol\";\nimport { Utilities } from \"./utilities/Utilities.sol\";\nimport { DomainObjs } from \"./utilities/DomainObjs.sol\";\nimport { CurveBabyJubJub } from \"./crypto/BabyJubJub.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { InternalLazyIMT, LazyIMTData } from \"./trees/LazyIMT.sol\";\n\n/// @title MACI - Minimum Anti-Collusion Infrastructure Version 1\n/// @notice A contract which allows users to sign up, and deploy new polls\ncontract MACI is IMACI, DomainObjs, Params, Utilities, Ownable(msg.sender) {\n  /// @notice The state tree depth is fixed. As such it should be as large as feasible\n  /// so that there can be as many users as possible.  i.e. 5 ** 10 = 9765625\n  /// this should also match the parameter of the circom circuits.\n  uint8 public immutable stateTreeDepth;\n\n  /// @notice IMPORTANT: remember to change the ballot tree depth\n  /// in contracts/ts/genEmptyBallotRootsContract.ts file\n  /// if we change the state tree depth!\n  uint8 internal constant STATE_TREE_SUBDEPTH = 2;\n  uint8 internal constant TREE_ARITY = 2;\n  uint8 internal constant MESSAGE_TREE_ARITY = 5;\n\n  /// @notice The hash of a blank state leaf\n  uint256 internal constant BLANK_STATE_LEAF_HASH =\n    uint256(6769006970205099520508948723718471724660867171122235270773600567925038008762);\n\n  /// @notice Each poll has an incrementing ID\n  uint256 public nextPollId;\n\n  /// @notice A mapping of poll IDs to Poll contracts.\n  mapping(uint256 => address) public polls;\n\n  /// @notice ERC20 contract that hold topup credits\n  TopupCredit public immutable topupCredit;\n\n  /// @notice Factory contract that deploy a Poll contract\n  IPollFactory public immutable pollFactory;\n\n  /// @notice Factory contract that deploy a MessageProcessor contract\n  IMessageProcessorFactory public immutable messageProcessorFactory;\n\n  /// @notice Factory contract that deploy a Tally contract\n  ITallyFactory public immutable tallyFactory;\n\n  /// @notice The state tree. Represents a mapping between each user's public key\n  /// and their voice credit balance.\n  LazyIMTData public lazyIMTData;\n\n  /// @notice Address of the SignUpGatekeeper, a contract which determines whether a\n  /// user may sign up to vote\n  SignUpGatekeeper public immutable signUpGatekeeper;\n\n  /// @notice The contract which provides the values of the initial voice credit\n  /// balance per user\n  InitialVoiceCreditProxy public immutable initialVoiceCreditProxy;\n\n  /// @notice A struct holding the addresses of poll, mp and tally\n  struct PollContracts {\n    address poll;\n    address messageProcessor;\n    address tally;\n  }\n\n  // Events\n  event SignUp(\n    uint256 _stateIndex,\n    uint256 indexed _userPubKeyX,\n    uint256 indexed _userPubKeyY,\n    uint256 _voiceCreditBalance,\n    uint256 _timestamp\n  );\n  event DeployPoll(\n    uint256 _pollId,\n    uint256 indexed _coordinatorPubKeyX,\n    uint256 indexed _coordinatorPubKeyY,\n    PollContracts pollAddr\n  );\n\n  /// @notice Only allow a Poll contract to call the modified function.\n  modifier onlyPoll(uint256 _pollId) {\n    if (msg.sender != address(polls[_pollId])) revert CallerMustBePoll(msg.sender);\n    _;\n  }\n\n  /// @notice custom errors\n  error CallerMustBePoll(address _caller);\n  error PoseidonHashLibrariesNotLinked();\n  error TooManySignups();\n  error InvalidPubKey();\n  error PreviousPollNotCompleted(uint256 pollId);\n  error PollDoesNotExist(uint256 pollId);\n  error SignupTemporaryBlocked();\n\n  /// @notice Create a new instance of the MACI contract.\n  /// @param _pollFactory The PollFactory contract\n  /// @param _messageProcessorFactory The MessageProcessorFactory contract\n  /// @param _tallyFactory The TallyFactory contract\n  /// @param _signUpGatekeeper The SignUpGatekeeper contract\n  /// @param _initialVoiceCreditProxy The InitialVoiceCreditProxy contract\n  /// @param _topupCredit The TopupCredit contract\n  /// @param _stateTreeDepth The depth of the state tree\n  constructor(\n    IPollFactory _pollFactory,\n    IMessageProcessorFactory _messageProcessorFactory,\n    ITallyFactory _tallyFactory,\n    SignUpGatekeeper _signUpGatekeeper,\n    InitialVoiceCreditProxy _initialVoiceCreditProxy,\n    TopupCredit _topupCredit,\n    uint8 _stateTreeDepth\n  ) payable {\n    // initialize and insert the blank leaf\n    InternalLazyIMT._init(lazyIMTData, _stateTreeDepth);\n    InternalLazyIMT._insert(lazyIMTData, BLANK_STATE_LEAF_HASH);\n\n    pollFactory = _pollFactory;\n    messageProcessorFactory = _messageProcessorFactory;\n    tallyFactory = _tallyFactory;\n    topupCredit = _topupCredit;\n    signUpGatekeeper = _signUpGatekeeper;\n    initialVoiceCreditProxy = _initialVoiceCreditProxy;\n    stateTreeDepth = _stateTreeDepth;\n\n    // Verify linked poseidon libraries\n    if (hash2([uint256(1), uint256(1)]) == 0) revert PoseidonHashLibrariesNotLinked();\n  }\n\n  /// @notice Allows any eligible user sign up. The sign-up gatekeeper should prevent\n  /// double sign-ups or ineligible users from doing so.  This function will\n  /// only succeed if the sign-up deadline has not passed. It also enqueues a\n  /// fresh state leaf into the state AccQueue.\n  /// @param _pubKey The user's desired public key.\n  /// @param _signUpGatekeeperData Data to pass to the sign-up gatekeeper's\n  ///     register() function. For instance, the POAPGatekeeper or\n  ///     SignUpTokenGatekeeper requires this value to be the ABI-encoded\n  ///     token ID.\n  /// @param _initialVoiceCreditProxyData Data to pass to the\n  ///     InitialVoiceCreditProxy, which allows it to determine how many voice\n  ///     credits this user should have.\n  function signUp(\n    PubKey memory _pubKey,\n    bytes memory _signUpGatekeeperData,\n    bytes memory _initialVoiceCreditProxyData\n  ) public virtual {\n    // ensure we do not have more signups than what the circuits support\n    if (lazyIMTData.numberOfLeaves >= uint256(TREE_ARITY) ** uint256(stateTreeDepth)) revert TooManySignups();\n\n    // ensure that the public key is on the baby jubjub curve\n    if (!CurveBabyJubJub.isOnCurve(_pubKey.x, _pubKey.y)) {\n      revert InvalidPubKey();\n    }\n\n    // Register the user via the sign-up gatekeeper. This function should\n    // throw if the user has already registered or if ineligible to do so.\n    signUpGatekeeper.register(msg.sender, _signUpGatekeeperData);\n\n    // Get the user's voice credit balance.\n    uint256 voiceCreditBalance = initialVoiceCreditProxy.getVoiceCredits(msg.sender, _initialVoiceCreditProxyData);\n\n    uint256 timestamp = block.timestamp;\n\n    // Create a state leaf and insert it into the tree.\n    uint256 stateLeaf = hashStateLeaf(StateLeaf(_pubKey, voiceCreditBalance, timestamp));\n    InternalLazyIMT._insert(lazyIMTData, stateLeaf);\n\n    emit SignUp(lazyIMTData.numberOfLeaves - 1, _pubKey.x, _pubKey.y, voiceCreditBalance, timestamp);\n  }\n\n  /// @notice Deploy a new Poll contract.\n  /// @param _duration How long should the Poll last for\n  /// @param _treeDepths The depth of the Merkle trees\n  /// @param _coordinatorPubKey The coordinator's public key\n  /// @param _verifier The Verifier Contract\n  /// @param _vkRegistry The VkRegistry Contract\n  /// @param _mode Voting mode\n  /// @return pollAddr a new Poll contract address\n  function deployPoll(\n    uint256 _duration,\n    TreeDepths memory _treeDepths,\n    PubKey memory _coordinatorPubKey,\n    address _verifier,\n    address _vkRegistry,\n    Mode _mode\n  ) public virtual onlyOwner returns (PollContracts memory pollAddr) {\n    // cache the poll to a local variable so we can increment it\n    uint256 pollId = nextPollId;\n\n    // Increment the poll ID for the next poll\n    // 2 ** 256 polls available\n    unchecked {\n      nextPollId++;\n    }\n\n    // check coordinator key is a valid point on the curve\n    if (!CurveBabyJubJub.isOnCurve(_coordinatorPubKey.x, _coordinatorPubKey.y)) {\n      revert InvalidPubKey();\n    }\n\n    MaxValues memory maxValues = MaxValues({\n      maxMessages: uint256(MESSAGE_TREE_ARITY) ** _treeDepths.messageTreeDepth,\n      maxVoteOptions: uint256(MESSAGE_TREE_ARITY) ** _treeDepths.voteOptionTreeDepth\n    });\n\n    address _owner = owner();\n\n    address p = pollFactory.deploy(\n      _duration,\n      maxValues,\n      _treeDepths,\n      _coordinatorPubKey,\n      address(this),\n      topupCredit,\n      _owner\n    );\n\n    address mp = messageProcessorFactory.deploy(_verifier, _vkRegistry, p, _owner, _mode);\n    address tally = tallyFactory.deploy(_verifier, _vkRegistry, p, mp, _owner, _mode);\n\n    polls[pollId] = p;\n\n    // store the addresses in a struct so they can be returned\n    pollAddr = PollContracts({ poll: p, messageProcessor: mp, tally: tally });\n\n    emit DeployPoll(pollId, _coordinatorPubKey.x, _coordinatorPubKey.y, pollAddr);\n  }\n\n  /// @inheritdoc IMACI\n  function getStateTreeRoot() public view returns (uint256 root) {\n    root = InternalLazyIMT._root(lazyIMTData);\n  }\n\n  /// @notice Get the Poll details\n  /// @param _pollId The identifier of the Poll to retrieve\n  /// @return poll The Poll contract object\n  function getPoll(uint256 _pollId) public view returns (address poll) {\n    if (_pollId >= nextPollId) revert PollDoesNotExist(_pollId);\n    poll = polls[_pollId];\n  }\n\n  /// @inheritdoc IMACI\n  function numSignUps() public view returns (uint256 signUps) {\n    signUps = lazyIMTData.numberOfLeaves;\n  }\n}\n"
    },
    "maci-contracts/contracts/TopupCredit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/// @title TopupCredit\n/// @notice A contract representing a token used to topup a MACI's voter\n/// credits\ncontract TopupCredit is ERC20, Ownable(msg.sender) {\n  uint8 public constant DECIMALS = 1;\n  uint256 public constant MAXIMUM_AIRDROP_AMOUNT = 100000 * 10 ** DECIMALS;\n\n  /// @notice custom errors\n  error ExceedLimit();\n\n  /// @notice create  a new TopupCredit token\n  constructor() payable ERC20(\"TopupCredit\", \"TopupCredit\") {}\n\n  /// @notice mint tokens to an account\n  /// @param account the account to mint tokens to\n  /// @param amount the amount of tokens to mint\n  function airdropTo(address account, uint256 amount) public onlyOwner {\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\n      revert ExceedLimit();\n    }\n\n    _mint(account, amount);\n  }\n\n  /// @notice mint tokens to the contract owner\n  /// @param amount the amount of tokens to mint\n  function airdrop(uint256 amount) public onlyOwner {\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\n      revert ExceedLimit();\n    }\n\n    _mint(msg.sender, amount);\n  }\n}\n"
    },
    "maci-contracts/contracts/trees/AccQueue.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Hasher } from \"../crypto/Hasher.sol\";\n\n/// @title AccQueue\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\n/// subtree. To obtain the main tree root, the contract owner must merge the\n/// subtrees together. Merging subtrees requires at least 2 operations:\n/// mergeSubRoots(), and merge(). To get around the gas limit,\n/// the mergeSubRoots() can be performed in multiple transactions.\nabstract contract AccQueue is Ownable(msg.sender), Hasher {\n  // The maximum tree depth\n  uint256 public constant MAX_DEPTH = 32;\n\n  /// @notice A Queue is a 2D array of Merkle roots and indices which represents nodes\n  /// in a Merkle tree while it is progressively updated.\n  struct Queue {\n    /// @notice IMPORTANT: the following declares an array of b elements of type T: T[b]\n    /// And the following declares an array of b elements of type T[a]: T[a][b]\n    /// As such, the following declares an array of MAX_DEPTH+1 arrays of\n    /// uint256[4] arrays, **not the other way round**:\n    uint256[4][MAX_DEPTH + 1] levels;\n    uint256[MAX_DEPTH + 1] indices;\n  }\n\n  // The depth of each subtree\n  uint256 internal immutable subDepth;\n\n  // The number of elements per hash operation. Should be either 2 (for\n  // binary trees) or 5 (quinary trees). The limit is 5 because that is the\n  // maximum supported number of inputs for the EVM implementation of the\n  // Poseidon hash function\n  uint256 internal immutable hashLength;\n\n  // hashLength ** subDepth\n  uint256 internal immutable subTreeCapacity;\n\n  // True hashLength == 2, false if hashLength == 5\n  bool internal isBinary;\n\n  // The index of the current subtree. e.g. the first subtree has index 0, the\n  // second has 1, and so on\n  uint256 internal currentSubtreeIndex;\n\n  // Tracks the current subtree.\n  Queue internal leafQueue;\n\n  // Tracks the smallest tree of subroots\n  Queue internal subRootQueue;\n\n  // Subtree roots\n  mapping(uint256 => uint256) internal subRoots;\n\n  // Merged roots\n  uint256[MAX_DEPTH + 1] internal mainRoots;\n\n  // Whether the subtrees have been merged\n  bool public subTreesMerged;\n\n  // Whether entire merkle tree has been merged\n  bool public treeMerged;\n\n  // The root of the shortest possible tree which fits all current subtree\n  // roots\n  uint256 internal smallSRTroot;\n\n  // Tracks the next subroot to queue\n  uint256 internal nextSubRootIndex;\n\n  // The number of leaves inserted across all subtrees so far\n  uint256 public numLeaves;\n\n  /// @notice custom errors\n  error SubDepthCannotBeZero();\n  error SubdepthTooLarge(uint256 _subDepth, uint256 max);\n  error InvalidHashLength();\n  error DepthCannotBeZero();\n  error SubTreesAlreadyMerged();\n  error NothingToMerge();\n  error SubTreesNotMerged();\n  error DepthTooLarge(uint256 _depth, uint256 max);\n  error DepthTooSmall(uint256 _depth, uint256 min);\n  error InvalidIndex(uint256 _index);\n  error InvalidLevel();\n\n  /// @notice Create a new AccQueue\n  /// @param _subDepth The depth of each subtree.\n  /// @param _hashLength The number of leaves per node (2 or 5).\n  constructor(uint256 _subDepth, uint256 _hashLength) payable {\n    /// validation\n    if (_subDepth == 0) revert SubDepthCannotBeZero();\n    if (_subDepth > MAX_DEPTH) revert SubdepthTooLarge(_subDepth, MAX_DEPTH);\n    if (_hashLength != 2 && _hashLength != 5) revert InvalidHashLength();\n\n    isBinary = _hashLength == 2;\n    subDepth = _subDepth;\n    hashLength = _hashLength;\n    subTreeCapacity = _hashLength ** _subDepth;\n  }\n\n  /// @notice Hash the contents of the specified level and the specified leaf.\n  /// This is a virtual function as the hash function which the overriding\n  /// contract uses will be either hashLeftRight or hash5, which require\n  /// different input array lengths.\n  /// @param _level The level to hash.\n  /// @param _leaf The leaf include with the level.\n  /// @return _hash The hash of the level and leaf.\n  // solhint-disable-next-line no-empty-blocks\n  function hashLevel(uint256 _level, uint256 _leaf) internal virtual returns (uint256 _hash) {}\n\n  /// @notice Hash the contents of the specified level and the specified leaf.\n  /// This is a virtual function as the hash function which the overriding\n  /// contract uses will be either hashLeftRight or hash5, which require\n  /// different input array lengths.\n  /// @param _level The level to hash.\n  /// @param _leaf The leaf include with the level.\n  /// @return _hash The hash of the level and leaf.\n  // solhint-disable-next-line no-empty-blocks\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view virtual returns (uint256 _hash) {}\n\n  /// @notice Returns the zero leaf at a specified level.\n  /// This is a virtual function as the hash function which the overriding\n  /// contract uses will be either hashLeftRight or hash5, which will produce\n  /// different zero values (e.g. hashLeftRight(0, 0) vs\n  /// hash5([0, 0, 0, 0, 0]). Moreover, the zero value may be a\n  /// nothing-up-my-sleeve value.\n  /// @param _level The level at which to return the zero leaf.\n  /// @return zero The zero leaf at the specified level.\n  // solhint-disable-next-line no-empty-blocks\n  function getZero(uint256 _level) internal virtual returns (uint256 zero) {}\n\n  /// @notice Add a leaf to the queue for the current subtree.\n  /// @param _leaf The leaf to add.\n  /// @return leafIndex The index of the leaf in the queue.\n  function enqueue(uint256 _leaf) public onlyOwner returns (uint256 leafIndex) {\n    leafIndex = numLeaves;\n    // Recursively queue the leaf\n    _enqueue(_leaf, 0);\n\n    // Update the leaf counter\n    numLeaves = leafIndex + 1;\n\n    // Now that a new leaf has been added, mainRoots and smallSRTroot are\n    // obsolete\n    delete mainRoots;\n    delete smallSRTroot;\n    subTreesMerged = false;\n\n    // If a subtree is full\n    if (numLeaves % subTreeCapacity == 0) {\n      // Store the subroot\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\n\n      // Increment the index\n      currentSubtreeIndex++;\n\n      // Delete ancillary data\n      delete leafQueue.levels[subDepth][0];\n      delete leafQueue.indices;\n    }\n  }\n\n  /// @notice Updates the queue at a given level and hashes any subroots\n  /// that need to be hashed.\n  /// @param _leaf The leaf to add.\n  /// @param _level The level at which to queue the leaf.\n  function _enqueue(uint256 _leaf, uint256 _level) internal {\n    if (_level > subDepth) {\n      revert InvalidLevel();\n    }\n\n    while (true) {\n      uint256 n = leafQueue.indices[_level];\n\n      if (n != hashLength - 1) {\n        // Just store the leaf\n        leafQueue.levels[_level][n] = _leaf;\n\n        if (_level != subDepth) {\n          // Update the index\n          leafQueue.indices[_level]++;\n        }\n\n        return;\n      }\n\n      // Hash the leaves to next level\n      _leaf = hashLevel(_level, _leaf);\n\n      // Reset the index for this level\n      delete leafQueue.indices[_level];\n\n      // Queue the hash of the leaves into to the next level\n      _level++;\n    }\n  }\n\n  /// @notice Fill any empty leaves of the current subtree with zeros and store the\n  /// resulting subroot.\n  function fill() public onlyOwner {\n    if (numLeaves % subTreeCapacity == 0) {\n      // If the subtree is completely empty, then the subroot is a\n      // precalculated zero value\n      subRoots[currentSubtreeIndex] = getZero(subDepth);\n    } else {\n      // Otherwise, fill the rest of the subtree with zeros\n      _fill(0);\n\n      // Store the subroot\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\n\n      // Reset the subtree data\n      delete leafQueue.levels;\n\n      // Reset the merged roots\n      delete mainRoots;\n    }\n\n    // Increment the subtree index\n    uint256 curr = currentSubtreeIndex + 1;\n    currentSubtreeIndex = curr;\n\n    // Update the number of leaves\n    numLeaves = curr * subTreeCapacity;\n\n    // Reset the subroot tree root now that it is obsolete\n    delete smallSRTroot;\n\n    subTreesMerged = false;\n  }\n\n  /// @notice A function that queues zeros to the specified level, hashes,\n  /// the level, and enqueues the hash to the next level.\n  /// @param _level The level at which to queue zeros.\n  // solhint-disable-next-line no-empty-blocks\n  function _fill(uint256 _level) internal virtual {}\n\n  /// Insert a subtree. Used for batch enqueues.\n  function insertSubTree(uint256 _subRoot) public onlyOwner {\n    subRoots[currentSubtreeIndex] = _subRoot;\n\n    // Increment the subtree index\n    currentSubtreeIndex++;\n\n    // Update the number of leaves\n    numLeaves += subTreeCapacity;\n\n    // Reset the subroot tree root now that it is obsolete\n    delete smallSRTroot;\n\n    subTreesMerged = false;\n  }\n\n  /// @notice Calculate the lowest possible height of a tree with\n  /// all the subroots merged together.\n  /// @return depth The lowest possible height of a tree with all the\n  function calcMinHeight() public view returns (uint256 depth) {\n    depth = 1;\n    while (true) {\n      if (hashLength ** depth >= currentSubtreeIndex) {\n        break;\n      }\n      depth++;\n    }\n  }\n\n  /// @notice Merge all subtrees to form the shortest possible tree.\n  /// This function can be called either once to merge all subtrees in a\n  /// single transaction, or multiple times to do the same in multiple\n  /// transactions.\n  /// @param _numSrQueueOps The number of times this function will call\n  ///                       queueSubRoot(), up to the maximum number of times\n  ///                       necessary. If it is set to 0, it will call\n  ///                       queueSubRoot() as many times as is necessary. Set\n  ///                       this to a low number and call this function\n  ///                       multiple times if there are many subroots to\n  ///                       merge, or a single transaction could run out of\n  ///                       gas.\n  function mergeSubRoots(uint256 _numSrQueueOps) public onlyOwner {\n    // This function can only be called once unless a new subtree is created\n    if (subTreesMerged) revert SubTreesAlreadyMerged();\n\n    // There must be subtrees to merge\n    if (numLeaves == 0) revert NothingToMerge();\n\n    // Fill any empty leaves in the current subtree with zeros only if the\n    // current subtree is not full\n    if (numLeaves % subTreeCapacity != 0) {\n      fill();\n    }\n\n    // If there is only 1 subtree, use its root\n    if (currentSubtreeIndex == 1) {\n      smallSRTroot = getSubRoot(0);\n      subTreesMerged = true;\n      return;\n    }\n\n    uint256 depth = calcMinHeight();\n\n    uint256 queueOpsPerformed = 0;\n    for (uint256 i = nextSubRootIndex; i < currentSubtreeIndex; i++) {\n      if (_numSrQueueOps != 0 && queueOpsPerformed == _numSrQueueOps) {\n        // If the limit is not 0, stop if the limit has been reached\n        return;\n      }\n\n      // Queue the next subroot\n      queueSubRoot(getSubRoot(nextSubRootIndex), 0, depth);\n\n      // Increment the next subroot counter\n      nextSubRootIndex++;\n\n      // Increment the ops counter\n      queueOpsPerformed++;\n    }\n\n    // The height of the tree of subroots\n    uint256 m = hashLength ** depth;\n\n    // Queue zeroes to fill out the SRT\n    if (nextSubRootIndex == currentSubtreeIndex) {\n      uint256 z = getZero(subDepth);\n      for (uint256 i = currentSubtreeIndex; i < m; i++) {\n        queueSubRoot(z, 0, depth);\n      }\n    }\n\n    // Store the smallest main root\n    smallSRTroot = subRootQueue.levels[depth][0];\n    subTreesMerged = true;\n  }\n\n  /// @notice Queues a subroot into the subroot tree.\n  /// @param _leaf The value to queue.\n  /// @param _level The level at which to queue _leaf.\n  /// @param _maxDepth The depth of the tree.\n  function queueSubRoot(uint256 _leaf, uint256 _level, uint256 _maxDepth) internal {\n    if (_level > _maxDepth) {\n      return;\n    }\n\n    uint256 n = subRootQueue.indices[_level];\n\n    if (n != hashLength - 1) {\n      // Just store the leaf\n      subRootQueue.levels[_level][n] = _leaf;\n      subRootQueue.indices[_level]++;\n    } else {\n      // Hash the elements in this level and queue it in the next level\n      uint256 hashed;\n      if (isBinary) {\n        uint256[2] memory inputs;\n        inputs[0] = subRootQueue.levels[_level][0];\n        inputs[1] = _leaf;\n        hashed = hash2(inputs);\n      } else {\n        uint256[5] memory inputs;\n        for (uint8 i = 0; i < n; i++) {\n          inputs[i] = subRootQueue.levels[_level][i];\n        }\n        inputs[n] = _leaf;\n        hashed = hash5(inputs);\n      }\n\n      // TODO: change recursion to a while loop\n      // Recurse\n      delete subRootQueue.indices[_level];\n      queueSubRoot(hashed, _level + 1, _maxDepth);\n    }\n  }\n\n  /// @notice Merge all subtrees to form a main tree with a desired depth.\n  /// @param _depth The depth of the main tree. It must fit all the leaves or\n  ///               this function will revert.\n  /// @return root The root of the main tree.\n  function merge(uint256 _depth) public onlyOwner returns (uint256 root) {\n    // The tree depth must be more than 0\n    if (_depth == 0) revert DepthCannotBeZero();\n\n    // Ensure that the subtrees have been merged\n    if (!subTreesMerged) revert SubTreesNotMerged();\n\n    // Check the depth\n    if (_depth > MAX_DEPTH) revert DepthTooLarge(_depth, MAX_DEPTH);\n\n    // Calculate the SRT depth\n    uint256 srtDepth = subDepth;\n    while (true) {\n      if (hashLength ** srtDepth >= numLeaves) {\n        break;\n      }\n      srtDepth++;\n    }\n\n    if (_depth < srtDepth) revert DepthTooSmall(_depth, srtDepth);\n\n    // If the depth is the same as the SRT depth, just use the SRT root\n    if (_depth == srtDepth) {\n      mainRoots[_depth] = smallSRTroot;\n      treeMerged = true;\n      return smallSRTroot;\n    } else {\n      root = smallSRTroot;\n\n      // Calculate the main root\n\n      for (uint256 i = srtDepth; i < _depth; i++) {\n        uint256 z = getZero(i);\n\n        if (isBinary) {\n          uint256[2] memory inputs;\n          inputs[0] = root;\n          inputs[1] = z;\n          root = hash2(inputs);\n        } else {\n          uint256[5] memory inputs;\n          inputs[0] = root;\n          inputs[1] = z;\n          inputs[2] = z;\n          inputs[3] = z;\n          inputs[4] = z;\n          root = hash5(inputs);\n        }\n      }\n\n      mainRoots[_depth] = root;\n      treeMerged = true;\n    }\n  }\n\n  /// @notice Returns the subroot at the specified index. Reverts if the index refers\n  /// to a subtree which has not been filled yet.\n  /// @param _index The subroot index.\n  /// @return subRoot The subroot at the specified index.\n  function getSubRoot(uint256 _index) public view returns (uint256 subRoot) {\n    if (currentSubtreeIndex <= _index) revert InvalidIndex(_index);\n    subRoot = subRoots[_index];\n  }\n\n  /// @notice Returns the subroot tree (SRT) root. Its value must first be computed\n  /// using mergeSubRoots.\n  /// @return smallSubTreeRoot The SRT root.\n  function getSmallSRTroot() public view returns (uint256 smallSubTreeRoot) {\n    if (!subTreesMerged) revert SubTreesNotMerged();\n    smallSubTreeRoot = smallSRTroot;\n  }\n\n  /// @notice Return the merged Merkle root of all the leaves at a desired depth.\n  /// @dev merge() or merged(_depth) must be called first.\n  /// @param _depth The depth of the main tree. It must first be computed\n  ///               using mergeSubRoots() and merge().\n  /// @return mainRoot The root of the main tree.\n  function getMainRoot(uint256 _depth) public view returns (uint256 mainRoot) {\n    if (hashLength ** _depth < numLeaves) revert DepthTooSmall(_depth, numLeaves);\n\n    mainRoot = mainRoots[_depth];\n  }\n\n  /// @notice Get the next subroot index and the current subtree index.\n  function getSrIndices() public view returns (uint256 next, uint256 current) {\n    next = nextSubRootIndex;\n    current = currentSubtreeIndex;\n  }\n}\n"
    },
    "maci-contracts/contracts/trees/LazyIMT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { PoseidonT3 } from \"../crypto/PoseidonT3.sol\";\n\n/// @notice A struct that holds a LazyIMT data\nstruct LazyIMTData {\n  uint40 maxIndex;\n  uint40 numberOfLeaves;\n  mapping(uint256 => uint256) elements;\n}\n\n/// @notice Custom errors\nerror DefaultZeroBadIndex();\nerror DepthTooLarge();\nerror DepthCannotBeZero();\nerror NumberOfLeavesCannotBeZero();\nerror AmbiguousDepth();\n\n/// @title InternalLazyIMT\n/// @dev A LazyIMT with Zeroes value set to the hash of\n/// a MACI Blank State Leaf\n/// @notice This implementation is taken from zk-kit\n/// https://github.com/privacy-scaling-explorations/zk-kit/blob/main/packages/imt.sol/contracts/internal/InternalLazyIMT.sol\n/// and modified to work with MACI.\nlibrary InternalLazyIMT {\n  uint256 internal constant MAX_DEPTH = 32;\n\n  uint40 internal constant MAX_INDEX = (1 << 32) - 1;\n\n  uint256 internal constant Z_0 = 6769006970205099520508948723718471724660867171122235270773600567925038008762;\n  uint256 internal constant Z_1 = 2972820301952105722688860985556183033855705951263221082702981787813754939537;\n  uint256 internal constant Z_2 = 19009473369953096352828532459942637819279786575057870804186038131433538383332;\n  uint256 internal constant Z_3 = 1877001762518233819645599208989578372605193385355680834239714249281096297174;\n  uint256 internal constant Z_4 = 4022598852800694816938652741439614774645858989706174527409714109784047480520;\n  uint256 internal constant Z_5 = 8078617093048295855521451309865989496051030103472138252021705658681696298712;\n  uint256 internal constant Z_6 = 21861637049723057871988413507302821095913894718242489848472531680353400271584;\n  uint256 internal constant Z_7 = 2969626195902860050407584814596940245443093107470116547781577350415736914038;\n  uint256 internal constant Z_8 = 13863086449569754493134198846069090996475357615094865751949144794620598051673;\n  uint256 internal constant Z_9 = 13774233155966252113965527228795435224641075024674384267997743867571011718458;\n  uint256 internal constant Z_10 = 7674682532432601125535053858292577379388329393276537570517515727197672122157;\n  uint256 internal constant Z_11 = 2657471847139856346360223652201172662911313292042510535836997980857168085414;\n  uint256 internal constant Z_12 = 14112562742724116016492623819773686970029672095023612838615540190985426106768;\n  uint256 internal constant Z_13 = 16966520284141749853106006448832965932249937855809150844697400390499975107456;\n  uint256 internal constant Z_14 = 21146121663662200258116396149536742745305242191891337170899444969488030502620;\n  uint256 internal constant Z_15 = 8395571901509192935479743034608666551563743095742598750914087478677907730358;\n  uint256 internal constant Z_16 = 11584898446168752024843587018551921614604785083342073076015560385003528300499;\n  uint256 internal constant Z_17 = 19681365563800708744156562671961079617734353445922751560400662591064339349816;\n  uint256 internal constant Z_18 = 11060693795061987995391612467169498625108376769265861980249917517984263067473;\n  uint256 internal constant Z_19 = 20136055137568042031318427040358591430196153124171666293804511634641041409480;\n  uint256 internal constant Z_20 = 10438448879123510479428288344427042332522761183009746406441238260861529360499;\n  uint256 internal constant Z_21 = 20302411580043873005239406811066876697276902025885155920151067303221158887923;\n  uint256 internal constant Z_22 = 16905699456770804689394621400052823445587122726651394178036372609288266146575;\n  uint256 internal constant Z_23 = 13317924909658910751179983108234689413063120680580702936091220805509299490708;\n  uint256 internal constant Z_24 = 11624463897690689883938167321830091369950933831231839575225419984927228390345;\n  uint256 internal constant Z_25 = 12388077003631746290497429926117583834311703848735670874049584990731919769551;\n  uint256 internal constant Z_26 = 16641943593086083573943184041147806885253724243247212515325749241831788827569;\n  uint256 internal constant Z_27 = 8675770901378242337954792996483564563211065498082968464791979179678744114204;\n  uint256 internal constant Z_28 = 3741944068643598116715410464277276913339851849923986024648161859457213369743;\n  uint256 internal constant Z_29 = 9365051374992868354747065577256691008852056444829383197903446097138255771103;\n  uint256 internal constant Z_30 = 19608043542461863702809013760105552654336523908709289008189330402608282498922;\n  uint256 internal constant Z_31 = 15116478429455923389320892447700153271977917184085737305957533984219061034768;\n  uint256 internal constant Z_32 = 13372161856163346716845871420623647679532631520878788090782842562075678687737;\n\n  /// @notice Returns the default zero value for a given index\n  /// @param index The index of the zero value\n  /// @return The zero value\n  function _defaultZero(uint8 index) internal pure returns (uint256) {\n    if (index == 0) return Z_0;\n    if (index == 1) return Z_1;\n    if (index == 2) return Z_2;\n    if (index == 3) return Z_3;\n    if (index == 4) return Z_4;\n    if (index == 5) return Z_5;\n    if (index == 6) return Z_6;\n    if (index == 7) return Z_7;\n    if (index == 8) return Z_8;\n    if (index == 9) return Z_9;\n    if (index == 10) return Z_10;\n    if (index == 11) return Z_11;\n    if (index == 12) return Z_12;\n    if (index == 13) return Z_13;\n    if (index == 14) return Z_14;\n    if (index == 15) return Z_15;\n    if (index == 16) return Z_16;\n    if (index == 17) return Z_17;\n    if (index == 18) return Z_18;\n    if (index == 19) return Z_19;\n    if (index == 20) return Z_20;\n    if (index == 21) return Z_21;\n    if (index == 22) return Z_22;\n    if (index == 23) return Z_23;\n    if (index == 24) return Z_24;\n    if (index == 25) return Z_25;\n    if (index == 26) return Z_26;\n    if (index == 27) return Z_27;\n    if (index == 28) return Z_28;\n    if (index == 29) return Z_29;\n    if (index == 30) return Z_30;\n    if (index == 31) return Z_31;\n    if (index == 32) return Z_32;\n    revert DefaultZeroBadIndex();\n  }\n\n  /// @notice Initializes the LazyIMT\n  /// @param self The LazyIMTData\n  /// @param depth The depth of the tree\n  function _init(LazyIMTData storage self, uint8 depth) internal {\n    if (depth > MAX_DEPTH) {\n      revert DepthTooLarge();\n    }\n    self.maxIndex = uint40((1 << depth) - 1);\n    self.numberOfLeaves = 0;\n  }\n\n  /// @notice Returns the index for a given level and index\n  /// @param level The level\n  /// @param index The index\n  /// @return The index for the element\n  function _indexForElement(uint8 level, uint40 index) internal pure returns (uint40) {\n    // store the elements sparsely\n    return MAX_INDEX * level + index;\n  }\n\n  /// @notice Inserts a leaf into the LazyIMT\n  /// @param self The LazyIMTData\n  /// @param leaf The leaf to insert\n  function _insert(LazyIMTData storage self, uint256 leaf) internal {\n    uint40 index = self.numberOfLeaves;\n\n    self.numberOfLeaves = index + 1;\n\n    uint256 hash = leaf;\n\n    for (uint8 i = 0; ; ) {\n      self.elements[_indexForElement(i, index)] = hash;\n      // it's a left element so we don't hash until there's a right element\n      if (index & 1 == 0) break;\n      uint40 elementIndex = _indexForElement(i, index - 1);\n      hash = PoseidonT3.poseidon([self.elements[elementIndex], hash]);\n      unchecked {\n        index >>= 1;\n        i++;\n      }\n    }\n  }\n\n  /// @notice Returns the root of the LazyIMT\n  /// @param self The LazyIMTData\n  /// @return The root of the LazyIMT\n  function _root(LazyIMTData storage self) internal view returns (uint256) {\n    // this will always short circuit if self.numberOfLeaves == 0\n    uint40 numberOfLeaves = self.numberOfLeaves;\n    // dynamically determine a depth\n    uint8 depth = 1;\n    while (uint40(2) ** uint40(depth) < numberOfLeaves) {\n      depth++;\n    }\n    return _root(self, numberOfLeaves, depth);\n  }\n\n  /// @notice Returns the root of the LazyIMT\n  /// @dev Here it's assumed that the depth value is valid.\n  /// If it is either 0 or > 2^8-1 this function will panic.\n  /// @param self The LazyIMTData\n  /// @param numberOfLeaves The number of leaves\n  /// @param depth The depth of the tree\n  /// @return The root of the LazyIMT\n  function _root(LazyIMTData storage self, uint40 numberOfLeaves, uint8 depth) internal view returns (uint256) {\n    if (depth > MAX_DEPTH) {\n      revert DepthTooLarge();\n    }\n    // this should always short circuit if self.numberOfLeaves == 0\n    if (numberOfLeaves == 0) return _defaultZero(depth);\n    uint256[] memory levels = new uint256[](depth + 1);\n    _levels(self, numberOfLeaves, depth, levels);\n    return levels[depth];\n  }\n\n  /// @notice Updates the levels of the LazyIMT\n  /// @param self The LazyIMTData\n  /// @param numberOfLeaves The number of leaves\n  /// @param depth The depth of the tree\n  /// @param levels The levels of the tree\n  function _levels(\n    LazyIMTData storage self,\n    uint40 numberOfLeaves,\n    uint8 depth,\n    uint256[] memory levels\n  ) internal view {\n    if (depth > MAX_DEPTH) {\n      revert DepthTooLarge();\n    }\n    if (numberOfLeaves == 0) {\n      revert NumberOfLeavesCannotBeZero();\n    }\n\n    // this should always short circuit if self.numberOfLeaves == 0\n    uint40 index = numberOfLeaves - 1;\n\n    if (index & 1 == 0) {\n      levels[0] = self.elements[_indexForElement(0, index)];\n    } else {\n      levels[0] = _defaultZero(0);\n    }\n\n    for (uint8 i = 0; i < depth; ) {\n      if (index & 1 == 0) {\n        levels[i + 1] = PoseidonT3.poseidon([levels[i], _defaultZero(i)]);\n      } else {\n        uint256 levelCount = (numberOfLeaves) >> (i + 1);\n        if (levelCount > index >> 1) {\n          uint256 parent = self.elements[_indexForElement(i + 1, index >> 1)];\n          levels[i + 1] = parent;\n        } else {\n          uint256 sibling = self.elements[_indexForElement(i, index - 1)];\n          levels[i + 1] = PoseidonT3.poseidon([sibling, levels[i]]);\n        }\n      }\n      unchecked {\n        index >>= 1;\n        i++;\n      }\n    }\n  }\n}\n"
    },
    "maci-contracts/contracts/utilities/DomainObjs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title DomainObjs\n/// @notice An utility contract that holds\n/// a number of domain objects and functions\ncontract DomainObjs {\n  /// @notice the length of a MACI message\n  uint8 public constant MESSAGE_DATA_LENGTH = 10;\n\n  /// @notice voting modes\n  enum Mode {\n    QV,\n    NON_QV\n  }\n\n  /// @title Message\n  /// @notice this struct represents a MACI message\n  /// @dev msgType: 1 for vote message, 2 for topup message (size 2)\n  struct Message {\n    uint256 msgType;\n    uint256[MESSAGE_DATA_LENGTH] data;\n  }\n\n  /// @title PubKey\n  /// @notice A MACI public key\n  struct PubKey {\n    uint256 x;\n    uint256 y;\n  }\n\n  /// @title StateLeaf\n  /// @notice A MACI state leaf\n  /// @dev used to represent a user's state\n  /// in the state Merkle tree\n  struct StateLeaf {\n    PubKey pubKey;\n    uint256 voiceCreditBalance;\n    uint256 timestamp;\n  }\n}\n"
    },
    "maci-contracts/contracts/utilities/Params.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IMACI } from \"../interfaces/IMACI.sol\";\nimport { AccQueue } from \"../trees/AccQueue.sol\";\nimport { TopupCredit } from \"../TopupCredit.sol\";\n\n/// @title Params\n/// @notice This contracts contains a number of structures\n/// which are to be passed as parameters to Poll contracts.\n/// This way we can reduce the number of parameters\n/// and avoid a stack too deep error during compilation.\ncontract Params {\n  /// @notice A struct holding the depths of the merkle trees\n  struct TreeDepths {\n    uint8 intStateTreeDepth;\n    uint8 messageTreeSubDepth;\n    uint8 messageTreeDepth;\n    uint8 voteOptionTreeDepth;\n  }\n\n  /// @notice A struct holding the max values for the poll\n  struct MaxValues {\n    uint256 maxMessages;\n    uint256 maxVoteOptions;\n  }\n\n  /// @notice A struct holding the external contracts\n  /// that are to be passed to a Poll contract on\n  /// deployment\n  struct ExtContracts {\n    IMACI maci;\n    AccQueue messageAq;\n    TopupCredit topupCredit;\n  }\n}\n"
    },
    "maci-contracts/contracts/utilities/Utilities.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\nimport { DomainObjs } from \"./DomainObjs.sol\";\nimport { Hasher } from \"../crypto/Hasher.sol\";\nimport { SnarkConstants } from \"../crypto/SnarkConstants.sol\";\n\n/// @title Utilities\n/// @notice An utility contract that can be used to:\n/// * hash a state leaf\n/// * pad and hash a MACI message\n/// * hash a MACI message and an encryption public key\ncontract Utilities is SnarkConstants, DomainObjs, Hasher {\n  /// @notice custom errors\n  error InvalidMessage();\n\n  /// @notice An utility function used to hash a state leaf\n  /// @param _stateLeaf the state leaf to be hashed\n  /// @return ciphertext The hash of the state leaf\n  function hashStateLeaf(StateLeaf memory _stateLeaf) public pure returns (uint256 ciphertext) {\n    uint256[4] memory plaintext;\n    plaintext[0] = _stateLeaf.pubKey.x;\n    plaintext[1] = _stateLeaf.pubKey.y;\n    plaintext[2] = _stateLeaf.voiceCreditBalance;\n    plaintext[3] = _stateLeaf.timestamp;\n\n    ciphertext = hash4(plaintext);\n  }\n\n  /// @notice An utility function used to pad and hash a MACI message\n  /// @param dataToPad the data to be padded\n  /// @param msgType the type of the message\n  /// @return message The padded message\n  /// @return padKey The padding public key\n  /// @return msgHash The hash of the padded message and encryption key\n  function padAndHashMessage(\n    uint256[2] memory dataToPad,\n    uint256 msgType\n  ) public pure returns (Message memory message, PubKey memory padKey, uint256 msgHash) {\n    // add data and pad it to 10 elements (automatically cause it's the default value)\n    uint256[10] memory dat;\n    dat[0] = dataToPad[0];\n    dat[1] = dataToPad[1];\n\n    padKey = PubKey(PAD_PUBKEY_X, PAD_PUBKEY_Y);\n    message = Message({ msgType: msgType, data: dat });\n    msgHash = hashMessageAndEncPubKey(message, padKey);\n  }\n\n  /// @notice An utility function used to hash a MACI message and an encryption public key\n  /// @param _message the message to be hashed\n  /// @param _encPubKey the encryption public key to be hashed\n  /// @return msgHash The hash of the message and the encryption public key\n  function hashMessageAndEncPubKey(\n    Message memory _message,\n    PubKey memory _encPubKey\n  ) public pure returns (uint256 msgHash) {\n    if (_message.data.length != 10) {\n      revert InvalidMessage();\n    }\n\n    uint256[5] memory n;\n    n[0] = _message.data[0];\n    n[1] = _message.data[1];\n    n[2] = _message.data[2];\n    n[3] = _message.data[3];\n    n[4] = _message.data[4];\n\n    uint256[5] memory m;\n    m[0] = _message.data[5];\n    m[1] = _message.data[6];\n    m[2] = _message.data[7];\n    m[3] = _message.data[8];\n    m[4] = _message.data[9];\n\n    msgHash = hash5([_message.msgType, hash5(n), hash5(m), _encPubKey.x, _encPubKey.y]);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}